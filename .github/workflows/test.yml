name: Bitcoin Echo Node Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - '**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - '**'
      - '.github/workflows/**'

env:
  GO_VERSION: '1.21'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests with coverage
      run: |
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...

    - name: Generate coverage report
      run: |
        go tool cover -html=coverage.out -o coverage.html
        go tool cover -func=coverage.out -o coverage.txt

    - name: Display coverage summary
      run: |
        echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        tail -1 coverage.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Check coverage threshold
      run: |
        COVERAGE=$(go tool cover -func=coverage.out | tail -1 | awk '{print $3}' | sed 's/%//')
        echo "Current coverage: ${COVERAGE}%"
        if (( $(echo "$COVERAGE < 95.0" | bc -l) )); then
          echo "❌ Coverage ${COVERAGE}% is below required 95%"
          echo "Bitcoin Echo requires high coverage for consensus-critical code"
          exit 1
        else
          echo "✅ Coverage ${COVERAGE}% meets the 95% requirement"
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./node/coverage.out
        directory: ./node
        fail_ci_if_error: false
        verbose: true

  lint:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

    - name: Check Go formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "❌ Code is not properly formatted:"
          gofmt -s -l .
          echo "Run 'gofmt -s -w .' to fix formatting"
          exit 1
        else
          echo "✅ Code is properly formatted"
        fi

    - name: Check for common Go issues
      run: |
        go vet ./...
        echo "✅ No issues found with go vet"

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -severity medium -confidence medium -fmt sarif -out gosec-results.sarif ./...

    - name: Upload Gosec results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: gosec-results.sarif

  build:
    name: Build Verification
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build binary
      run: |
        go build -v -ldflags="-s -w" -o bitcoin-echo ./cmd/bitcoin-echo

    - name: Verify binary
      run: |
        if [ -f "bitcoin-echo" ] || [ -f "bitcoin-echo.exe" ]; then
          echo "✅ Binary built successfully"
          ls -la bitcoin-echo* || ls -la bitcoin-echo*.exe
        else
          echo "❌ Binary build failed"
          exit 1
        fi

  consensus-critical-tests:
    name: Consensus Critical Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Run consensus-critical tests with extra validation
      run: |
        echo "🔍 Running consensus-critical test suites..."

        # Hash functions (must be 100% coverage)
        go test -v -count=3 ./tests/unit/bitcoin -run TestHash

        # Transaction validation (must be 100% coverage)
        go test -v -count=3 ./tests/unit/bitcoin -run TestTransaction

        # Block validation (must be 100% coverage)
        go test -v -count=3 ./tests/unit/bitcoin -run TestBlock

        # Script execution (must be 100% coverage)
        go test -v -count=3 ./tests/unit/bitcoin -run TestScript

        # Proof of Work (must be 100% coverage)
        go test -v -count=3 ./tests/unit/bitcoin -run TestProofOfWork

        # UTXO management (must be 100% coverage)
        go test -v -count=3 ./tests/unit/bitcoin -run TestUTXO

        # Blockchain validation (must be 100% coverage)
        go test -v -count=3 ./tests/unit/bitcoin -run TestBlockChain

        # Merkle tree (must be 100% coverage)
        go test -v -count=3 ./tests/unit/bitcoin -run TestMerkle

        echo "✅ All consensus-critical tests passed multiple runs"

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [test, lint, security, build, consensus-critical-tests]
    if: always()

    steps:
    - name: Test Results Summary
      run: |
        echo "## 🧪 Bitcoin Echo Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ needs.test.result }}" == "success" ]; then
          echo "✅ **Test Suite**: All tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Test Suite**: Tests failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.lint.result }}" == "success" ]; then
          echo "✅ **Code Quality**: Linting passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Code Quality**: Linting failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.security.result }}" == "success" ]; then
          echo "✅ **Security**: No security issues found" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Security**: Security scan completed with findings" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.build.result }}" == "success" ]; then
          echo "✅ **Build**: Binary compilation successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Build**: Binary compilation failed" >> $GITHUB_STEP_SUMMARY
        fi

        if [ "${{ needs.consensus-critical-tests.result }}" == "success" ]; then
          echo "✅ **Consensus Critical**: All critical tests passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Consensus Critical**: Critical tests failed" >> $GITHUB_STEP_SUMMARY
        fi

        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **TDD Methodology**: All changes follow Test-Driven Development" >> $GITHUB_STEP_SUMMARY
        echo "⚡ **Performance**: Tests optimized for CI/CD pipeline" >> $GITHUB_STEP_SUMMARY
        echo "🛡️ **Quality**: 95%+ code coverage requirement enforced" >> $GITHUB_STEP_SUMMARY