name: Security & Dependency Updates

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
    paths:
      - 'node/go.mod'
      - 'node/go.sum'
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Run Gosec Security Scanner
      run: |
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -fmt sarif -out gosec-results.sarif ./...

    - name: Upload Gosec results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec-results.sarif

    - name: Run Nancy vulnerability scanner
      run: |
        # Install nancy
        go install github.com/sonatypecommunity/nancy@latest

        # Generate dependency list and scan
        go list -json -deps ./... | nancy sleuth --exclude-vulnerability-file .nancy-ignore

    - name: Check for known vulnerabilities in dependencies
      run: |
        echo "üîç Checking for known vulnerabilities..."

        # Use govulncheck for Go-specific vulnerabilities
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

        echo "‚úÖ Vulnerability scan completed"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v3
      with:
        base-ref: ${{ github.event.pull_request.base.sha }}
        head-ref: ${{ github.event.pull_request.head.sha }}

  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Update Go dependencies
      run: |
        echo "üì¶ Updating Go dependencies..."

        # Update all dependencies to latest minor/patch versions
        go get -u ./...
        go mod tidy

        # Update to latest Go version in go.mod if needed
        go mod edit -go=${{ env.GO_VERSION }}

    - name: Run tests after update
      run: |
        echo "üß™ Running tests after dependency update..."
        go test -v ./...

    - name: Check for dependency changes
      id: dependency_changes
      run: |
        if git diff --quiet node/go.mod node/go.sum; then
          echo "No dependency updates available"
          echo "has_changes=false" >> $GITHUB_OUTPUT
        else
          echo "Dependencies updated"
          echo "has_changes=true" >> $GITHUB_OUTPUT
        fi

    - name: Create Pull Request for dependency updates
      if: steps.dependency_changes.outputs.has_changes == 'true'
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        commit-message: "chore: update Go dependencies"
        title: "üîÑ Automated Dependency Update"
        body: |
          ## üì¶ Automated Dependency Update

          This PR contains automated updates to Go dependencies.

          ### Changes
          - Updated Go dependencies to latest compatible versions
          - All tests passing after updates
          - Security vulnerabilities addressed (if any)

          ### Verification
          - [x] All tests pass
          - [x] Security scan completed
          - [x] No breaking changes detected

          **Auto-generated by GitHub Actions**
        branch: chore/update-dependencies
        delete-branch: true

  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Install go-licenses
      run: go install github.com/google/go-licenses@latest

    - name: Scan licenses
      run: |
        echo "üìÑ Scanning dependency licenses..."

        # Generate license report
        go-licenses report ./... > licenses.txt

        # Check for prohibited licenses
        PROHIBITED_LICENSES="GPL AGPL LGPL"

        for license in $PROHIBITED_LICENSES; do
          if grep -i "$license" licenses.txt; then
            echo "‚ùå Found prohibited license: $license"
            echo "Bitcoin Echo requires permissive licenses only"
            exit 1
          fi
        done

        echo "‚úÖ All dependency licenses are compatible"
        echo "üìã License summary:"
        cat licenses.txt

    - name: Upload license report
      uses: actions/upload-artifact@v3
      with:
        name: license-report
        path: ./licenses.txt